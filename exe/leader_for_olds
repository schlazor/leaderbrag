#!/usr/bin/env ruby
# frozen_string_literal: true

require 'leaderbrag/team'
require 'optparse'

options = {
  'quiet' => false,
  'list_teams' => false,
  'team' => 'minnesota-twins',
  'find' => false,
  'stats' => false
}
# rubocop:disable Metrics/BlockLength
OptionParser.new do |opts|
  opts.banner = "Usage: leader [options]\nFinds the best team in baseball or "\
  'determines if the requested team is the best team in baseball. Exit code '\
  'is 0 if find is performed or the requested team is the best team in '\
  'baseball. If the requested team is not the best team in baseball, the '\
  "team's current rank in their division is returned as the exit code."
  opts.on('-t team-id', '--team=team-id', 'Team ID to get lead status') do |t|
    options['team'] = t
  end
  opts.on('-L', '--list-team-ids', 'List all team IDs') do |_list_team_ids|
    options['list_teams'] = true
  end
  opts.on('-q', '--quiet', 'Do not print leadership status, indicate '\
          'leadership status with exit code only.') do |_quiet|
    options['quiet'] = true
  end
  opts.on('-f', '--find', 'Find the best team in baseball instead of asking '\
          'about a specific team.') do |_find|
    options['find'] = true
  end
  opts.on('-s', '--stats', 'Include team statistics in output') do |_stats|
    options['stats'] = true
  end
  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end
end.parse!
# rubocop:enable Metrics/BlockLength
if options['list_teams']
  standings = Leaderbrag::Standings.new.standings
  standings['standing'].each do |team|
    puts "#{team['first_name']} #{team['last_name']}:".ljust(23) +
         team['team_id']
  end
  exit
end

if options['find']
  standings = Leaderbrag::Standings.new.standings['standing']
  standings.sort_by! do |team|
    team['win_percentage'].to_f
  end
  options['team'] = standings[standings.length - 1]['team_id']
  puts "team is now #{options['team']}"
end
myteam = Leaderbrag::Team.new(options['team'])

if myteam.team_standings.nil?
  warn "No such team with ID #{options['team']}"
  exit 50
end

name = "#{myteam.team_standings['first_name']}"\
" #{myteam.team_standings['last_name']}"
league = myteam.team_standings['conference']
division = myteam.team_standings['division']
unless options['quiet']
  print "The #{name} are "
  print 'not ' unless myteam.division_leader?
  puts "the leaders of the #{league} #{division} division."
  print "The #{name} are "
  print 'not ' unless myteam.league_leader?
  puts "the leaders of the #{league}."
  print "The #{name} are "
  print 'not ' unless myteam.overall_leader?
  puts 'the best team in baseball.'
end

if options['stats']
  myteam.team_standings.each do |k, v|
    next if k == 'team_id'
    next if k == 'first_name'
    next if k == 'last_name'
    next if k == 'ordinal_rank'

    label = k.gsub(/_/, ' ').capitalize + ':'
    puts "#{label.ljust(30)} #{v}"
  end
end

if myteam.overall_leader?
  exit 0
else
  exit myteam.team_standings['rank']
end
